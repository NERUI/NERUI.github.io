<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法题 搜索二维矩阵</title>
      <link href="2021/03/30/%E7%AE%97%E6%B3%95%E9%A2%98-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/"/>
      <url>2021/03/30/%E7%AE%97%E6%B3%95%E9%A2%98-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<ol start="74"><li>搜索二维矩阵<br>编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：</li></ol><p>每行中的整数从左到右按升序排列。<br>每行的第一个整数大于前一行的最后一个整数。</p><p>示例 1：</p><p>输入：matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3<br>输出：true<br>示例 2：</p><p>输入：matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13<br>输出：false</p><p>提示：</p><p>m == matrix.length<br>n == matrix[i].length<br>1 &lt;= m, n &lt;= 100<br>-104 &lt;= matrix[i][j], target &lt;= 104</p><p>要求从这个二维数组中找一个数，我们从右上找起，如果比右上的数小就往前找，如果大就找下一行。</p><p>代码：</p><pre><code>class Solution &#123;public boolean searchMatrix(int[][] matrix, int target) &#123;    if(matrix.length == 0)    return false;    int row = 0, col = matrix[0].length-1;      //col是第一列的最后一个数也是右上的数    while(row &lt; matrix.length &amp;&amp; col &gt;= 0)&#123;        if(matrix[row][col] &lt; target)        //如果右上的数小于我们要找的，就去到下一行            row++;        else if(matrix[row][col] &gt; target)        //如果右上的数大于我们要找的，就去找这一行前面的数            col--;        else            return true;    &#125;    return false;    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Stack类</title>
      <link href="2021/03/24/Java-Stack%E7%B1%BB/"/>
      <url>2021/03/24/Java-Stack%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>Java Stack 类<br>栈是Vector的一个子类，它实现了一个标准的后进先出的栈。</p><p>堆栈只定义了默认构造函数，用来创建一个空栈。 堆栈除了包括由Vector定义的所有方法，也定义了自己的一些方法。</p><p>Stack()<br>除了由Vector定义的所有方法，自己也定义了一些方法：</p><ol><li><p>boolean empty()<br>测试堆栈是否为空。</p></li><li><p>Object peek( )<br>查看堆栈顶部的对象，但不从堆栈中移除它。</p></li><li><p>Object pop( )<br>移除堆栈顶部的对象，并作为此函数的值返回该对象。</p></li><li><p>Object push(Object element)<br>把项压入堆栈顶部。</p></li><li><p>int search(Object element)<br>返回对象在堆栈中的位置，以 1 为基数。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题 132模式</title>
      <link href="2021/03/24/%E7%AE%97%E6%B3%95%E9%A2%98-132%E6%A8%A1%E5%BC%8F/"/>
      <url>2021/03/24/%E7%AE%97%E6%B3%95%E9%A2%98-132%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>给你一个整数数组 nums ，数组中共有 n 个整数。132 模式的子序列 由三个整数 nums[i]、nums[j] 和 nums[k] 组成，并同时满足：i &lt; j &lt; k 和 nums[i] &lt; nums[k] &lt; nums[j] 。</p><p>如果 nums 中存在 132 模式的子序列 ，返回 true ；否则，返回 false 。</p><p> </p><p>进阶：很容易想到时间复杂度为 O(n^2) 的解决方案，你可以设计一个时间复杂度为 O(n logn) 或 O(n) 的解决方案吗？</p><p> </p><p>示例 1：</p><p>输入：nums = [1,2,3,4]<br>输出：false<br>解释：序列中不存在 132 模式的子序列。<br>示例 2：</p><p>输入：nums = [3,1,4,2]<br>输出：true<br>解释：序列中有 1 个 132 模式的子序列： [1, 4, 2] 。<br>示例 3：</p><p>输入：nums = [-1,3,2,0]<br>输出：true<br>解释：序列中有 3 个 132 模式的的子序列：[-1, 3, 2]、[-1, 3, 0] 和 [-1, 2, 0] 。 </p><p>提示：</p><p>n == nums.length<br>1 &lt;= n &lt;= 104<br>-109 &lt;= nums[i] &lt;= 109</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/132-pattern">https://leetcode-cn.com/problems/132-pattern</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p>代码：</p><pre><code>    class Solution &#123;     public boolean find132pattern(int[] nums) &#123;    int n = nums.length;    int last = Integer.MIN_VALUE; // 132中的2    Stack&lt;Integer&gt; sta = new Stack&lt;&gt;();// 用来存储132中的3    if(nums.length &lt; 3)        return false;    for(int i=n-1; i&gt;=0; i--)&#123;        if(nums[i] &lt; last) // 若出现132中的1则返回正确值            return true;        // 若当前值大于或等于2则更新2（2为栈中小于当前值的最大元素）        while(!sta.isEmpty() &amp;&amp; sta.peek() &lt; nums[i])&#123;            last = sta.pop();        &#125;        // 将当前值压入栈中        sta.push(nums[i]);    &#125;    return false;    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题 外观数列</title>
      <link href="2021/03/23/%E7%AE%97%E6%B3%95%E9%A2%98-%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97/"/>
      <url>2021/03/23/%E7%AE%97%E6%B3%95%E9%A2%98-%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>给定一个正整数 n ，输出外观数列的第 n 项。</p><p>「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。</p><p>你可以将其视作是由递归公式定义的数字字符串序列：</p><p>countAndSay(1) = “1”<br>countAndSay(n) 是对 countAndSay(n-1) 的描述，然后转换成另一个数字字符串。<br>前五项如下：</p><ol><li><pre><code>1</code></pre></li><li><pre><code>11</code></pre></li><li><pre><code>21</code></pre></li><li><pre><code>1211</code></pre></li><li><pre><code>111221</code></pre>第一项是数字 1<br>描述前一项，这个数是 1 即 “ 一 个 1 ”，记作 “11”<br>描述前一项，这个数是 11 即 “ 二 个 1 ” ，记作 “21”<br>描述前一项，这个数是 21 即 “ 一 个 2 + 一 个 1 ” ，记作 “1211”<br>描述前一项，这个数是 1211 即 “ 一 个 1 + 一 个 2 + 二 个 1 ” ，记作 “111221”</li></ol><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/count-and-say">https://leetcode-cn.com/problems/count-and-say</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p>代码：</p><pre><code>class Solution &#123;public String countAndSay(int n) &#123;    if(n == 1) return &quot;1&quot;;    String num = countAndSay(n - 1);    StringBuilder s = new StringBuilder();    for(int i=0; i&lt;num.length(); i++) &#123;        int count = 1;\\每次重新计算个数        while(i &lt; num.length()-1 &amp;&amp; num.charAt(i) == num.charAt(i+1))\\对比length-1次，每当前后数字一样i 就加一         &#123;            count++;            i++;        &#125;        s.append(count);        s.append(num.charAt(i));    &#125;    return s.toString();    &#125;&#125;</code></pre><p><strong>Java StringBuffer 和 StringBuilder 类</strong></p><p>当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。</p><p>和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。<br>在使用 StringBuffer 类时，每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，所以如果需要对字符串进行修改推荐使用 StringBuffer。</p><p>StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。</p><p>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。</p><p>StringBuffer 方法<br>以下是 StringBuffer 类支持的主要方法：</p><p>1    public StringBuffer append(String s)<br>将指定的字符串追加到此字符序列。</p><p>2    public StringBuffer reverse()<br> 将此字符序列用其反转形式取代。</p><p>3    public delete(int start, int end)<br>移除此序列的子字符串中的字符。</p><p>4    public insert(int offset, int i)<br>将 int 参数的字符串表示形式插入此序列中。</p><p>5    replace(int start, int end, String str)<br>使用给定 String 中的字符替换此序列的子字符串中的字符。</p><p>下面的列表里的方法和 String 类的方法类似：</p><p>1    int capacity()<br>返回当前容量。</p><p>2    char charAt(int index)<br>返回此序列中指定索引处的 char 值。</p><p>3    void ensureCapacity(int minimumCapacity)<br>确保容量至少等于指定的最小值。</p><p>4    void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)<br>将字符从此序列复制到目标字符数组 dst。</p><p>5    int indexOf(String str)<br>返回第一次出现的指定子字符串在该字符串中的索引。</p><p>6    int indexOf(String str, int fromIndex)<br>从指定的索引处开始，返回第一次出现的指定子字符串在该字符串中的索引。</p><p>7    int lastIndexOf(String str)<br>返回最右边出现的指定子字符串在此字符串中的索引。</p><p>8    int lastIndexOf(String str, int fromIndex)<br>返回 String 对象中子字符串最后出现的位置。</p><p>9    int length()<br> 返回长度（字符数）。</p><p>10    void setCharAt(int index, char ch)<br>将给定索引处的字符设置为 ch。</p><p>11    void setLength(int newLength)<br>设置字符序列的长度。</p><p>12    CharSequence subSequence(int start, int end)<br>返回一个新的字符序列，该字符序列是此序列的子序列。</p><p>13    String substring(int start)<br>返回一个新的 String，它包含此字符序列当前所包含的字符子序列。</p><p>14    String substring(int start, int end)<br>返回一个新的 String，它包含此序列当前所包含的字符子序列。</p><p>15    String toString()<br>返回此序列中数据的字符串表示形式。</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣题 可被5整除的二进制前缀</title>
      <link href="2021/01/14/%E5%8A%9B%E6%89%A3%E9%A2%98%20%E5%8F%AF%E8%A2%AB5%E6%95%B4%E9%99%A4%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%89%8D%E7%BC%80/"/>
      <url>2021/01/14/%E5%8A%9B%E6%89%A3%E9%A2%98%20%E5%8F%AF%E8%A2%AB5%E6%95%B4%E9%99%A4%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%89%8D%E7%BC%80/</url>
      
        <content type="html"><![CDATA[<p>给定由若干 0 和 1 组成的数组 A。我们定义 N_i：从 A[0] 到 A[i] 的第 i 个子数组被解释为一个二进制数（从最高有效位到最低有效位）。</p><p>返回布尔值列表 answer，只有当 N_i 可以被 5 整除时，答案 answer[i] 为 true，否则为 false。</p><p> </p><p>示例 1：</p><p>输入：[0,1,1]<br>输出：[true,false,false]<br>解释：<br>输入数字为 0, 01, 011；也就是十进制中的 0, 1, 3 。只有第一个数可以被 5 整除，因此 answer[0] 为真。<br>示例 2：</p><p>输入：[1,1,1]<br>输出：[false,false,false]<br>示例 3：</p><p>输入：[0,1,1,1,1,1]<br>输出：[true,false,false,false,true,false]<br>示例 4：</p><p>输入：[1,1,1,0,1]<br>输出：[false,false,false,false,false] </p><p>提示：</p><p>1 &lt;= A.length &lt;= 30000<br>A[i] 为 0 或 1</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-prefix-divisible-by-5">https://leetcode-cn.com/problems/binary-prefix-divisible-by-5</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p>下一个二进制前缀对应的十进制整数 = 上一次的结果左移一位（乘以2）的结果 + 这次的A[i]（0或者1，正好对应十进制的0或者1）的结果。</p><p>代码：</p><pre><code>class Solution &#123;    public List&lt;Boolean&gt; prefixesDivBy5(int[] A) &#123;        List&lt;Boolean&gt; ans = new ArrayList&lt;&gt;();        int num = 0;        for (int i = 0;i &lt; A.length;i++) &#123;                num &lt;&lt;= 1;            num += A[i];            num %= 10;            ans.add(num % 5 == 0);        &#125;        return ans;    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣题 冗余连接</title>
      <link href="2021/01/13/%E5%8A%9B%E6%89%A3%E9%A2%98-%E5%86%97%E4%BD%99%E8%BF%9E%E6%8E%A5/"/>
      <url>2021/01/13/%E5%8A%9B%E6%89%A3%E9%A2%98-%E5%86%97%E4%BD%99%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p>在本问题中, 树指的是一个连通且无环的无向图。</p><p>输入一个图，该图由一个有着N个节点 (节点值不重复1, 2, …, N) 的树及一条附加的边构成。附加的边的两个顶点包含在1到N中间，这条附加的边不属于树中已存在的边。</p><p>结果图是一个以边组成的二维数组。每一个边的元素是一对[u, v] ，满足 u &lt; v，表示连接顶点u 和v的无向图的边。</p><p>返回一条可以删去的边，使得结果图是一个有着N个节点的树。如果有多个答案，则返回二维数组中最后出现的边。答案边 [u, v] 应满足相同的格式 u &lt; v。</p><p>示例 1：</p><p>输入: [[1,2], [1,3], [2,3]]<br>输出: [2,3]<br>解释: 给定的无向图为:<br>  1<br> / <br>2 - 3<br>示例 2：</p><p>输入: [[1,2], [2,3], [3,4], [1,4], [1,5]]<br>输出: [1,4]<br>解释: 给定的无向图为:<br>5 - 1 - 2<br>    |   |<br>    4 - 3<br>注意:</p><p>输入的二维数组大小在 3 到 1000。<br>二维数组中的整数在1到N之间，其中N是输入数组的大小。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/redundant-connection">https://leetcode-cn.com/problems/redundant-connection</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p>又是查并集。</p><p>代码：</p><pre><code>class Solution &#123;int[] fa = new int[1001];//因为输入的二维数组大小在 3 到 1000public int find(int x) &#123;    if(x == fa[x])         return x;    return fa[x] = find(fa[x]);&#125;public void union(int x, int y) &#123;    int rootx = find(x);    int rooty = find(y);    if(rootx != rooty)         fa[rootx] = rooty;&#125;public int[] findRedundantConnection(int[][] e) &#123;    int len = e.length;    // 初始化    for(int i = 0; i &lt; len; i++) &#123;        fa[i] = i;    &#125;            for(int i = 0; i &lt; len; i++) &#123;        int x = find(e[i][0]);        int y = find(e[i][1]);        if(x == y) &#123;            return new int[]&#123;e[i][0], e[i][1]&#125;;//因为一旦形成了环，就可以表明当前遍历的是最后一个。        &#125; else &#123;            union(x, y);        &#125;    &#125;           return null;&#125;</code></pre><p>}</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣题 罗马数字转整数</title>
      <link href="2021/01/12/%E5%8A%9B%E6%89%A3%E9%A2%98-%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/"/>
      <url>2021/01/12/%E5%8A%9B%E6%89%A3%E9%A2%98-%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p><p>字符          数值<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000<br>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><p>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 <br>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p><p> </p><p>示例 1:</p><p>输入: “III”<br>输出: 3<br>示例 2:</p><p>输入: “IV”<br>输出: 4<br>示例 3:</p><p>输入: “IX”<br>输出: 9<br>示例 4:</p><p>输入: “LVIII”<br>输出: 58<br>解释: L = 50, V= 5, III = 3.<br>示例 5:</p><p>输入: “MCMXCIV”<br>输出: 1994<br>解释: M = 1000, CM = 900, XC = 90, IV = 4. </p><p>提示：</p><p>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。<br>IC 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXC</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/roman-to-integer">https://leetcode-cn.com/problems/roman-to-integer</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p>很简单的一题，只需要比较前后罗马数字的大小就行，如果前面的数字比后面的小，就减去它；反之，加上它。</p><p>代码：</p><pre><code>class Solution &#123;public int romanToInt(String s) &#123;    int sum = 0;    int preNum = getValue(s.charAt(0));    for(int i = 1;i &lt; s.length(); i ++) &#123;        int num = getValue(s.charAt(i));        if(preNum &lt; num) &#123;            sum -= preNum;        &#125; else &#123;            sum += preNum;        &#125;        preNum = num;    &#125;    sum += preNum;    return sum;&#125;private int getValue(char ch) &#123;    switch(ch) &#123;        case &#39;I&#39;: return 1;        case &#39;V&#39;: return 5;        case &#39;X&#39;: return 10;        case &#39;L&#39;: return 50;        case &#39;C&#39;: return 100;        case &#39;D&#39;: return 500;        case &#39;M&#39;: return 1000;        default: return 0;    &#125;&#125;</code></pre><p>}</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣题 回文数</title>
      <link href="2021/01/08/%E5%8A%9B%E6%89%A3%E9%A2%98-%E5%9B%9E%E6%96%87%E6%95%B0/"/>
      <url>2021/01/08/%E5%8A%9B%E6%89%A3%E9%A2%98-%E5%9B%9E%E6%96%87%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p>示例 1:</p><p>输入: 121<br>输出: true<br>示例 2:</p><p>输入: -121<br>输出: false<br>解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。<br>示例 3:</p><p>输入: 10<br>输出: false<br>解释: 从右向左读, 为 01 。因此它不是一个回文数。<br>进阶:</p><p>你能不将整数转为字符串来解决这个问题吗？</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/palindrome-number">https://leetcode-cn.com/problems/palindrome-number</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p>其实就是将数字倒过来再比较，解答还是很简单的<br>代码：</p><pre><code>class Solution &#123;    public boolean isPalindrome(int x) &#123;        if(x&lt;0)            return false;        int rem=0,y=0;        int quo=x;        while(quo!=0)&#123;            rem=quo%10;            y=y*10+rem;            quo=quo/10;        &#125;        return y==x;    &#125;    &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣题 省份数量</title>
      <link href="2021/01/07/%E5%8A%9B%E6%89%A3%E9%A2%98-%E7%9C%81%E4%BB%BD%E6%95%B0%E9%87%8F/"/>
      <url>2021/01/07/%E5%8A%9B%E6%89%A3%E9%A2%98-%E7%9C%81%E4%BB%BD%E6%95%B0%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>有 n 个城市，其中一些彼此相连，另一些没有相连。如果城市 a 与城市 b 直接相连，且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。</p><p>省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。</p><p>给你一个 n x n 的矩阵 isConnected ，其中 isConnected[i][j] = 1 表示第 i 个城市和第 j 个城市直接相连，而 isConnected[i][j] = 0 表示二者不直接相连。</p><p>返回矩阵中 省份 的数量。</p><p> </p><p>示例 1：</p><p>输入：isConnected = [[1,1,0],[1,1,0],[0,0,1]]<br>输出：2<br>示例 2：</p><p>输入：isConnected = [[1,0,0],[0,1,0],[0,0,1]]<br>输出：3</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/number-of-provinces">https://leetcode-cn.com/problems/number-of-provinces</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p>使用查并集解决，发现了挺有意思的解释并查集的原理的方法。附上链接：<a href="https://www.cnblogs.com/-new/p/6662301.html">https://www.cnblogs.com/-new/p/6662301.html</a></p><p>代码：</p><pre><code>class Solution &#123;    int[] p = new int[200];       int find(int x)&#123;           while(p[x] != x)             x = p[x];        return x;    &#125;       void union(int x, int y)&#123;        p[find(x)] = find(y);    &#125;    public int findCircleNum(int[][] isConnected) &#123;        int n = isConnected.length;        for(int i = 0; i &lt; n; i++) p[i] = i;        for(int i = 0; i &lt; n; i++)&#123;            for(int j = 0; j &lt; n; j++)&#123;                if(isConnected[i][j] == 1) union(i, j);            &#125;        &#125;        int res = 0;        for(int i = 0; i &lt; n; i++)&#123;            if(p[i] == i) res++;        &#125;        return res;    &#125;&#125;    </code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣题：两数相加</title>
      <link href="2021/01/05/%E5%8A%9B%E6%89%A3%E9%A2%98%EF%BC%9A%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
      <url>2021/01/05/%E5%8A%9B%E6%89%A3%E9%A2%98%EF%BC%9A%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a>两数相加</h1><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p> </p><p>示例 1：</p><p>输入：l1 = [2,4,3], l2 = [5,6,4]<br>输出：[7,0,8]<br>解释：342 + 465 = 807.<br>示例 2：</p><p>输入：l1 = [0], l2 = [0]<br>输出：[0]<br>示例 3：</p><p>输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]<br>输出：[8,9,9,9,0,0,0,1]</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/add-two-numbers">https://leetcode-cn.com/problems/add-two-numbers</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p>代码：</p><pre><code>class Solution &#123;    public ListNode addTwoNumbers(ListNode l1, ListNode l2) &#123;        ListNode root = new ListNode(0);        ListNode cursor = root;        int carry = 0;        while(l1 != null || l2 != null || carry != 0) &#123;            int l1Val = l1 != null ? l1.val : 0;            int l2Val = l2 != null ? l2.val : 0;            int sumVal = l1Val + l2Val + carry;            carry = sumVal / 10;                       ListNode sumNode = new ListNode(sumVal % 10);            cursor.next = sumNode;            cursor = sumNode;            if(l1 != null) l1 = l1.next;            if(l2 != null) l2 = l2.next;        &#125;        return root.next;    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/01/03/hello-world/"/>
      <url>2021/01/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
